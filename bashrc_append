##################### AUTOBASH ######################
# The following lines have been added by Autobash.
#####################################################

# Source bash aliases
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# For GIT Status
if [ ! -f ~/.bash_git ]
then
    echo "~/.bash_git does not exist. Downloading now."
    curl -L https://raw.github.com/git/git/master/contrib/completion/git-prompt.sh > ~/.bash_git
    echo "Download complete."
fi
source ~/.bash_git

git_dirty() {
 git st 2>/dev/null | wc -l | awk '{if ($1 > 2) print "â˜ "}'
}

git_prompt_info() {
if [ "`type -t __git_ps1`" == 'function' ]; then
 export GIT_PS1_SHOWDIRTYSTATE=true     # '*' for unstaged changes, '+' for staged
 export GIT_PS1_SHOWSTASHSTATE=true     # '$' if smth is stashed
 export GIT_PS1_SHOWUNTRACKEDFILES=true # '%' if un-tracked files
fi
 branch_prompt=$(__git_ps1)
 if [ -n "$branch_prompt" ]; then
   status_icon=$(git_dirty)
   echo $branch_prompt $status_icon
 fi
}

# '*' for unstaged changes, '+' for staged
# '$' if smth is stashed
# '%' if un-tracked files
function prompt {
   local BLACK="\[\033[0;30m\]"
   local RED="\[\033[0;31m\]"
   local GREEN="\[\033[0;32m\]"
   local YELLOW="\[\033[0;33m\]"
   local BLUE="\[\033[0;34m\]"
   local PURPLE="\[\033[0;35m\]"
   local CYAN="\[\033[0;36m\]"
   local WHITE="\[\033[0;37m\]"
   local WHITEBOLD="\[\033[1;37m\]"
   local __cur_location="\[\033[01;33m\]\w"
   local __git_branch_color="\[\033[31m\]"
   local __user_and_host="\[\033[01;32m\]\u@\h"

   export PS1="$__user_and_host\$ $__cur_location $__git_branch_color\$(git_prompt_info)${WHITE} \n\$ "
}

prompt

################################################################################
# AUTOBASH - Add autobash bin to path
################################################################################
export PATH=~/.autobash/bin:$PATH


################################################################################
# AUTOBASH - USER SECTION
################################################################################

# Install FZF
if [ ! -d ~/.fzf ]; then
    git clone --depth 1 https://github.com/nitred/fzf.git ~/.fzf
    ~/.fzf/install --key-bindings --completion --no-update-rc
fi

# For FZF
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
HISTSIZE=30000
HISTFILESIZE=40000


gittagdelete() {
  if [ ! -z $1 ] ; then
    git tag --delete $1 &&  git push --delete origin $1
  else
    echo "Usage: gittagdelete 0.5.3"
  fi
}


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/nitred/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/nitred/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/nitred/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/nitred/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


# # ------------------------------------------------------------------------------
# # GO
# # ------------------------------------------------------------------------------
# # Go source/binary has been downloaded + extracted + copied to /usr/local/go
# # Go binary files are added to the path
# export PATH=$PATH:/usr/local/go/bin

# # Trying to emulate conda environment structure with go
# # Folder called base will be where all the go get commands will download the libs
# # Additional custom environments/folders/workspaces will be added to the
# # GOPATH via other aliases such as gows-common, which will add 'common' to the GOPATH
# export GOPATH=/home/nitred/projects/group-go/go-base
# export PATH=$PATH:$GOPATH/bin


# # --------------------------------------------
# # Rust
# # --------------------------------------------
# source "$HOME/.cargo/env"

############################### AUTOBASH - END #################################
